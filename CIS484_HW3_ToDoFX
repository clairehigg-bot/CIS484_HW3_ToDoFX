/*
Assignment: HW#3
Names: Matt Dreyer, Claire Higginbotham
*/

package hw3;

import java.io.*;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.text.*;
import javafx.stage.Stage;


public class MainJavaFX_ToDoFX extends Application implements Serializable{
    
    Stage mainWindow;
    Scene mainScene;
    
    public static String toDoTitle;
    public static String category;
    
    ArrayList<ToDoItem> toDoItemArray = new ArrayList<>();
    ArrayList<String> categoryArray = new ArrayList<>();
    
    public static ObservableList<ToDoItem> olToDoItems = FXCollections.observableArrayList();
    public static ObservableList<String> olCategories = FXCollections.observableArrayList();
    
    public static ListView<ToDoItem> toDoListView = new ListView<ToDoItem>();
    public static ListView<String> categoriesListView = new ListView<String>();
    
    @Override
    public void start(Stage primaryStage) throws ClassNotFoundException {
        //load to do item data
        File itemFile = new File("todoitemdata.dat");
        if(itemFile.exists())
        {
            try{
                ObjectInputStream oin = new ObjectInputStream(new FileInputStream(itemFile));
                ArrayList<ToDoItem> toDoData = (ArrayList<ToDoItem>) oin.readObject();
                for(ToDoItem td: toDoData)
                {
                    olToDoItems.add(td);
                }
                oin.close();
            }
            catch(IOException ioex){
                ioex.printStackTrace();}
        }
        
        
        //Load category data
        File categoryFile = new File("categoriesdata.dat");
        if(categoryFile.exists())
        {
        try{
            ObjectInputStream din = new ObjectInputStream(new FileInputStream(categoryFile));
            ArrayList<String> categoryData = (ArrayList<String>) din.readObject();
            for(String c: categoryData)
            {
                olCategories.add(c);
            }
            din.close();
        }
        catch(IOException ioex){
            ioex.printStackTrace();}
        
        
        }
        
        mainWindow = primaryStage;
        
        toDoListView.setItems(olToDoItems);
        categoriesListView.setItems(olCategories);
        

        
        //Create menu
        MenuBar menuBar = new MenuBar();
        Menu menu = new Menu("Categories");
        MenuItem menuItem = new MenuItem("Edit Categories");
        
        menuBar.getMenus().addAll(menu);
        menu.getItems().addAll(menuItem);
        
        
        
        //Left pane of main screen
        VBox vbox1 = new VBox();
        vbox1.setPrefSize(250, 800);
        vbox1.setPadding(new Insets(0, 10, 10, 10));
        vbox1.setSpacing(5);
        
        Label lblNew = new Label("New To-Do Item Title:");
        lblNew.setPadding(new Insets(10, 0, 0, 0));
        TextArea txtNew = new TextArea();
        txtNew.setPrefSize(325, 60);
        Label lblCategory = new Label("Category:");
        lblCategory.setPadding(new Insets(10, 0, 0, 0));
        ComboBox cmboCategories = new ComboBox();
        cmboCategories.setItems(olCategories);
        cmboCategories.setPadding(new Insets(5, 0, 0, 0));
        cmboCategories.setPromptText("Choose a Category");
        Button btnAdd = new Button("Add New Item ->");
        btnAdd.setPadding(new Insets(5, 5, 5, 5));
        Button btnDelete = new Button("Delete Selected Item ->");
        btnDelete.setPadding(new Insets(5, 5, 5, 5));

        vbox1.getChildren().addAll(lblNew, txtNew, lblCategory,cmboCategories, btnAdd, btnDelete);
        
        

        
        //Right pane of main screen
        HBox hbox = new HBox();
        hbox.setPrefSize(325, 100);
        hbox.setSpacing(5);
        
        Button btnRaise = new Button("Raise");
        btnRaise.setPadding(new Insets(5, 5, 5, 5));
        Button btnLower = new Button("Lower");
        btnLower.setPadding(new Insets(5, 5, 5, 5));
        Button btnDetails = new Button("View Item Detail");
        btnDetails.setPadding(new Insets(5, 5, 5, 5));
        
        hbox.getChildren().addAll(btnRaise, btnLower, btnDetails);
        
        VBox vbox2 = new VBox();
        vbox2.setPrefSize(325, 800); //formatting
        vbox2.setPadding(new Insets(0, 10, 10, 10));
        vbox2.setSpacing(5);
        
        TextArea txtToDo = new TextArea();
        txtToDo.setPrefColumnCount(2);
        txtToDo.setPrefRowCount(15);
        txtToDo.setPrefSize(325, 500);
        
        vbox2.getChildren().addAll(toDoListView, hbox);
        
        
        
        //Holds left and right panes on main screen
        BorderPane border = new BorderPane();
        border.setPrefSize(600, 800);
        border.setMinHeight(800);
        border.setTop(menuBar); 
        border.setLeft(vbox1);
        border.setRight(vbox2);
        
        
        //Button controls
        
        
        
        //Opens edit categories window
        menuItem.setOnAction(e -> {
            
            showEditCategoriesScreen();
            
        });
        
        
        
        //Opens edit to-do list item window
        btnDetails.setOnAction(e -> {
            
            int currentIndex = toDoListView.getSelectionModel().getSelectedIndex(); //gets index of selected element
            
            ToDoItem currentItem = olToDoItems.get(currentIndex); //gets object at selected index
            
            showEditToDoScreen(currentItem);
            
        });
        

        
        //Adds an item to the to-do list
        btnAdd.setOnAction(e -> {
            
            String toDoTitle = txtNew.getText();
            
            String category = cmboCategories.getValue().toString();
            
            if(toDoTitle.equals("") || category.isEmpty())
            {
                AlertBox.display("Error", "Please enter an item to add to the to-do list");   
            }
            else
            {
                ToDoItem newItem = new ToDoItem(category, toDoTitle);
                
                olToDoItems.add(newItem);
             
                
                saveToDoItems(toDoItemArray);
                
            }
        });
        
        
        //Deletes item from to-do list
        btnDelete.setOnAction(e -> {
            
            olToDoItems.remove(toDoListView.getSelectionModel().getSelectedItem());
            
            
            saveToDoItems(toDoItemArray);
            
        });
        

        
        btnRaise.setOnAction(e -> {
            
            int currentIndex = toDoListView.getSelectionModel().getSelectedIndex(); //gets index of selected element
            
            ToDoItem currentItem = olToDoItems.get(currentIndex); //gets object at selected index
            
            olToDoItems.remove(currentIndex);
           
            
            olToDoItems.add((currentIndex-1), currentItem);
           
            
            saveToDoItems(toDoItemArray);
            
            
        });
        
        
        
        btnLower.setOnAction(e -> {
            
            int currentIndex = toDoListView.getSelectionModel().getSelectedIndex();
            
            ToDoItem currentItem = olToDoItems.get(currentIndex);
            
            olToDoItems.remove(currentIndex);
            
            
            olToDoItems.add((currentIndex+1), currentItem);
            
            
            saveToDoItems(toDoItemArray);
            
        });
                
        
        

        mainScene = new Scene(border, 600, 800);
        
        primaryStage.setTitle("ToDo.FX");
        primaryStage.setScene(mainScene);
        primaryStage.show();
        
    }


    public static void main(String[] args) {
        launch(args);
    }
    
    public void showEditCategoriesScreen(){
        
        Stage stage = new Stage();
        
        Button btnAdd = new Button("Add:");
        Button btnDelete = new Button("Delete Selected");
        
        TextField txtNew = new TextField();
        txtNew.setPromptText("Category name");
        
        categoriesListView.setPrefSize(300, 400);
        
        HBox hbox = new HBox();
        hbox.setPrefSize(300, 50);
        hbox.setSpacing(0);
        
        hbox.getChildren().addAll(btnAdd, btnDelete);
        
        VBox vbox = new VBox();
        vbox.setPrefSize(300, 400); 
        vbox.setPadding(new Insets(10, 10, 10, 10));
        vbox.setSpacing(0);
        
        vbox.getChildren().addAll(categoriesListView, txtNew, hbox);
        
        BorderPane border = new BorderPane();
        border.setPrefSize(300, 400);
        border.setMinHeight(400);
        
        border.setCenter(vbox);
        
        
        btnAdd.setOnAction(e -> {
            
            String newCategory = txtNew.getText();
            
            if(newCategory.equals(""))
            {
                AlertBox.display("Error", "Please enter a category name.");
            }
            else
            {
                olCategories.add(newCategory);
                
                
                saveCategories(categoryArray);
                
                txtNew.clear();
            }
        });
        
        
        
        btnDelete.setOnAction(e -> {
            
            olCategories.remove(categoriesListView.getSelectionModel().getSelectedItem());
            
            
            saveCategories(categoryArray);
            
        });
        
        
        
        
        Scene scene = new Scene(border, 300, 400);
        
        stage.setScene(scene);
        stage.setTitle("Edit Categories");
        stage.show();
    }
    
    public void showEditToDoScreen(ToDoItem item){
        
        Stage stage = new Stage();
        
        Button btnSave = new Button("Save Changes ->");
        
        TextField txtCategory = new TextField();
        TextField txtItem = new TextField();
        TextArea txtNotes = new TextArea();
        
        txtItem.setText(item.getToDoTitle());
        txtCategory.setText(item.getCategory());
        txtNotes.setText(item.getLongDescription());
        
        txtItem.setEditable(false);
        txtCategory.setEditable(false);
        
        txtNotes.setPrefSize(500, 380);
        txtNotes.setPromptText("Add Notes");
                
        VBox vbox1 = new VBox();
        vbox1.setSpacing(0);
        
        vbox1.getChildren().addAll(txtCategory, txtItem);
        
        HBox hbox = new HBox();
        hbox.setPrefSize(500, 100);
        hbox.setPadding(new Insets(0, 0, 10, 0));
        hbox.setSpacing(0);
        
        hbox.getChildren().addAll(vbox1, btnSave);
        
        VBox vbox2 = new VBox();
        vbox2.setPadding(new Insets(10, 10, 10, 10));
        vbox2.setSpacing(0);
        
        vbox2.getChildren().addAll(hbox, txtNotes);
        
        btnSave.setOnAction(e -> {
            
            String notes = txtNotes.getText();
            
            item.setLongDiscription(notes);
            
            int currentIndex = toDoListView.getSelectionModel().getSelectedIndex();
            
            ToDoItem currentItem = olToDoItems.get(currentIndex);
            
            olToDoItems.remove(currentIndex);
           
            
            olToDoItems.add((currentIndex), currentItem);
           
            
            saveToDoItems(toDoItemArray);

        });
        
        Scene scene = new Scene(vbox2, 500, 300);
        
        stage.setScene(scene);
        stage.setTitle("Edit To-Do Item");
        stage.show();
        
        
        
    }
    

    public void saveToDoItems(ArrayList toDoItemArray){
        try
        {
            toDoItemArray = new ArrayList<ToDoItem>();
            for(ToDoItem td: olToDoItems)
            {
                toDoItemArray.add(td);
            }
            File itemFile = new File("todoitemdata.dat");
            ObjectOutputStream oout = new ObjectOutputStream(new FileOutputStream(itemFile));
            oout.writeObject(toDoItemArray);
            System.out.println("Contents Saved."); 
            oout.close();
        }
        catch(IOException ioex){
            ioex.printStackTrace();
        }
    }
    
    

     public void saveCategories(ArrayList categoryArray){
        try
        {
            categoryArray = new ArrayList<String>();
            for(String c: olCategories)
            {
                categoryArray.add(c);
            }
            File categoryFile = new File("categoriesdata.dat");
            ObjectOutputStream oout = new ObjectOutputStream(new FileOutputStream(categoryFile));
            oout.writeObject(categoryArray);
            System.out.println("Contents Saved."); 
            oout.close();
        }
        catch(IOException ioex){
            ioex.printStackTrace();
        }
    }
     

     
     

     
    
}
